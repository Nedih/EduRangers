{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Flash\\\\Desktop\\\\React\\\\react_front\\\\src\\\\Containers\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Courses.css';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport history from \"../GlobalHistory/GlobalHistory\";\nexport default function Question(props) {\n  _s();\n\n  const [question, setQuestion] = useState();\n  const [name, setName] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState();\n\n  function GetQuestion() {\n    axios({\n      method: 'get',\n      url: `https://localhost:44327/api/Question/?id=${props.match.params.id}`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(result => {\n      console.log(\"RESULT: \", result.data);\n      setQuestion(result.data);\n      setIsLoading(false);\n    }).catch(error => {\n      setError(error);\n      setIsLoading(false);\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const questionModel = {\n      QuestionText: name\n    };\n    JSON.stringify(questionModel);\n    axios({\n      method: 'put',\n      url: `https://localhost:44327/api/Question/?id=${props.match.params.id}`,\n      data: JSON.stringify(questionModel),\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      console.log(\"RESPONSE \", res);\n      console.log(res.data);\n\n      if (res.data.Succedeed) {\n        alert(\"The test was changed succesfully\");\n      } else alert(\"The test wasn`t changed\");\n    });\n  }\n\n  function handleSubmit2(event) {\n    event.preventDefault();\n    const questionModel = {\n      QuestionText: name\n    };\n    JSON.stringify(questionModel);\n    axios({\n      method: 'put',\n      url: `https://localhost:44327/api/Question/?id=${props.match.params.id}`,\n      data: JSON.stringify(questionModel),\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      console.log(\"RESPONSE \", res);\n      console.log(res.data);\n\n      if (res.data.Succedeed) {\n        alert(\"The test was changed succesfully\");\n      } else alert(\"The test wasn`t changed\");\n    });\n  }\n\n  useEffect(() => {\n    GetQuestion();\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 20\n    }, this);\n  }\n\n  const Answers = question.Answers.map(item => /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit2,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      size: \"lg\",\n      controlId: item.Id,\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        value: item.AnswerText,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      block: true,\n      size: \"lg\",\n      type: \"submit\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 56\n  }, this));\n  console.log({\n    Answers\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Question\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        size: \"lg\",\n        controlId: \"name\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          value: question.QuestionText,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        block: true,\n        size: \"lg\",\n        type: \"submit\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: \"Answers:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n  /* */\n}\n\n_s(Question, \"kjIPQFi6Zlw+iPk22SIImpqO+Dw=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Flash/Desktop/React/react_front/src/Containers/Question.js"],"names":["React","useState","useEffect","axios","Form","Button","history","Question","props","question","setQuestion","name","setName","isLoading","setIsLoading","error","setError","GetQuestion","method","url","match","params","id","headers","then","result","console","log","data","catch","handleSubmit","event","preventDefault","questionModel","QuestionText","JSON","stringify","maxContentLength","Infinity","maxBodyLength","res","Succedeed","alert","handleSubmit2","Answers","map","item","Id","AnswerText","e","target","value"],"mappings":"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","sourcesContent":["import React, {useState, useEffect}  from 'react';\r\n    import axios from 'axios';\r\n    import './Courses.css';\r\n    import Form from \"react-bootstrap/Form\";\r\n    import Button from \"react-bootstrap/Button\";\r\n    import history from \"../GlobalHistory/GlobalHistory\"\r\n\r\n    export default function Question(props){\r\n        const [question, setQuestion] = useState();  \r\n        const [name, setName] = useState(); \r\n        const [isLoading, setIsLoading] = useState(true);\r\n        const [error, setError] = useState();\r\n\r\n        function GetQuestion() {\r\n            axios({method: 'get',\r\n            url: `https://localhost:44327/api/Question/?id=${props.match.params.id}`,\r\n            headers: {'Content-Type': 'application/json'}})\r\n                .then(\r\n                (result) => {\r\n                    console.log(\"RESULT: \", result.data)\r\n                    setQuestion(result.data)\r\n                    setIsLoading(false);\r\n                }\r\n                ).catch(error => {setError(error);\r\n                                setIsLoading(false);}) \r\n            }\r\n\r\n            function handleSubmit(event) {\r\n            event.preventDefault();\r\n            const questionModel = {\r\n                QuestionText: name\r\n            };\r\n            JSON.stringify(questionModel);\r\n            axios({\r\n                method: 'put',\r\n                url: `https://localhost:44327/api/Question/?id=${props.match.params.id}`,\r\n                data: JSON.stringify(questionModel),\r\n                maxContentLength: Infinity,\r\n                maxBodyLength: Infinity,\r\n                headers: {'Content-Type': 'application/json'}\r\n            })\r\n                .then(res => {\r\n                console.log(\"RESPONSE \", res);\r\n                console.log(res.data);\r\n                if(res.data.Succedeed){\r\n                    alert(\"The test was changed succesfully\");\r\n                }  \r\n                else alert(\"The test wasn`t changed\");\r\n                }) \r\n            }\r\n\r\n            function handleSubmit2(event) {\r\n                event.preventDefault();\r\n                const questionModel = {\r\n                    QuestionText: name\r\n                };\r\n                JSON.stringify(questionModel);\r\n                axios({\r\n                    method: 'put',\r\n                    url: `https://localhost:44327/api/Question/?id=${props.match.params.id}`,\r\n                    data: JSON.stringify(questionModel),\r\n                    maxContentLength: Infinity,\r\n                    maxBodyLength: Infinity,\r\n                    headers: {'Content-Type': 'application/json'}\r\n                })\r\n                    .then(res => {\r\n                    console.log(\"RESPONSE \", res);\r\n                    console.log(res.data);\r\n                    if(res.data.Succedeed){\r\n                        alert(\"The test was changed succesfully\");\r\n                    }  \r\n                    else alert(\"The test wasn`t changed\");\r\n                    }) \r\n                }\r\n\r\n\r\n        useEffect(() => {\r\n                GetQuestion();\r\n        }, []);\r\n\r\n        if(isLoading){\r\n            return(\r\n            <p>Loading...</p>\r\n            )\r\n        }\r\n        else if(error){\r\n            return(<p>Error</p>)\r\n        }\r\n        \r\n        \r\n\r\n       const Answers = question.Answers.map((item =>   <Form onSubmit={handleSubmit2}>\r\n            <Form.Group size=\"lg\" controlId={item.Id}>\r\n        <Form.Control\r\n            type=\"text\"\r\n            value={item.AnswerText}\r\n        onChange={(e) => setName(e.target.value)}\r\n        />\r\n        </Form.Group>\r\n        <Button block size=\"lg\" type=\"submit\">\r\n        Save\r\n        </Button>\r\n    </Form>));\r\n        console.log({Answers});\r\n\r\n        return(\r\n        <div className=\"Question\">\r\n            <Form onSubmit={handleSubmit}>\r\n            <Form.Group size=\"lg\" controlId=\"name\">\r\n        <Form.Label><h3>Question</h3></Form.Label>\r\n        <Form.Control\r\n            type=\"text\"\r\n            value={question.QuestionText}\r\n        onChange={(e) => setName(e.target.value)}\r\n        />\r\n        </Form.Group>\r\n        <Button block size=\"lg\" type=\"submit\">\r\n        Save\r\n        </Button>\r\n        </Form>\r\n        <br />\r\n        <br />\r\n        <h6>Answers:</h6>\r\n        \r\n        </div>\r\n        )\r\n\r\n        /* */\r\n    \r\n}           "]},"metadata":{},"sourceType":"module"}